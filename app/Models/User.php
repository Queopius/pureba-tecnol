<?php

namespace App\Models;

use Illuminate\Support\Str;
use App\Actions\Query\UserQuery;
use Laravel\Sanctum\HasApiTokens;
use Illuminate\Support\Facades\DB;
use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Support\Facades\{Hash, Storage};
use App\Actions\Shared\Traits\GetTextPaginations;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Database\Eloquent\{Prunable, SoftDeletes};

class User extends Authenticatable implements MustVerifyEmail
{
    use HasApiTokens,
        HasFactory,
        Notifiable,
        SoftDeletes,
        Prunable,
        GetTextPaginations;

    protected $guarded = [];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    /**
     * Get the prunable model query.
     *
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function prunable()
    {
        return static::where(
            'created_at',
            '<=',
            now()->subMonths(6)
        )->whereNotNull('deleted_at');
    }

    protected function pruning()
    {
        echo 'Pruning ' . $this->username . PHP_EOL;
    }

    /**
     * @return UserQuery
     */
    public static function query()
    {
        return parent::query(); // TODO: Change the autogenerated stub
    }

    /**
     * Create a new Eloquent query builder for the model.
     *
     * @param  \Illuminate\Database\Query\Builder  $query
     * @return \Illuminate\Database\Eloquent\Builder|static
     */
    public function newEloquentBuilder($query)
    {
        return new UserQuery($query);
    }

    public function listRelationships()
    {
        return [
            //
        ];
    }

    public function listUsers($request)
    {
        return $this->query()
                ->with($this->listRelationships())
                ->onlyTrashedIf(request()->routeIs('admin.users.trashed'))
                ->applyFilters()
                ->orderByDesc('created_at')
                ->paginate($request->per_page);
    }

    public function getRouteKeyUsername()
    {
        return 'slug';
    }

    public function setUsernameAttribute($username)
    {
        $this->attributes['username'] = $username;
        $this->attributes['slug'] = Str::slug($username);
    }

    public function setPasswordAttribute($password)
    {
        if ($password) {
            $this->attributes['password']
                        = Hash::needsRehash($password)
                        ? Hash::make($password)
                        : $password;
        }
    }

    public function setAvatarAttribute($avatar)
    {
        if ($avatar) {
            Storage::disk('avatars')->delete($this->avatar);

            $fileNameExtension = $avatar->getClientOriginalName();
            $fileName = pathinfo($fileNameExtension, PATHINFO_FILENAME);
            $extension = $avatar->getClientOriginalExtension();
            $fileNameToStore = $fileName.'_'. uniqid($this->id) .'_'.time().'.'.$extension;
            $path = $avatar->storeAs('public/avatars', $fileNameToStore);

            $this->attributes['avatar'] = $fileNameToStore;
        }
    }

    public function getAvatarPathAttribute()
    {
        if ($this->avatar) {
            return asset(Storage::url('avatars/'.$this->avatar));
        }

        return url('uploads/avatars/default-avatar.jpg');
    }

    public function reviews()
    {
        return $this->hasMany(Review::class);
    }

    public function products()
    {
        return $this->hasMany(Product::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function userTrashed()
    {
        return $this->with('user')->onlyTrashed();
    }

    public function getCountUsersTrashedAttribute()
    {
        return $this->userTrashed()->get()->count();
    }

    public function delete()
    {
        DB::transaction(function () {
            if (parent::delete()) {
                $this->reviews()->delete();
            }
        });
    }
}
